#!/bin/bash
# This CI acceptance test is based on:
# https://github.com/jsoref/spelling/tree/04648bdc63723e5cdf5cbeaff2225a462807abc8
# It is conceptually `f` which runs `w` (spelling-unknown-word-splitter)
# plus `fchurn` which uses `dn` mostly rolled together.
set -e

spellchecker='spelling-ci'
w_location='https://raw.githubusercontent.com/jsoref/spelling/master/w'
temp='.ci-temp'
whitelist_path="$spellchecker/whitelist.words.txt"
excludelist_path="$spellchecker/excludes.txt"
dict="$temp/english.words"
word_splitter="$spellchecker/spelling-unknown-word-splitter.pl"
run_output="$spellchecker/unknown.words.txt"

wordlist=$bucket/english.words.txt

if [ -z "$bucket" ]; then
  echo "$0 requires "'$project be set to your bucket (gs://your-project-bucket-path)' >&2
  exit 1
fi
if [ -z "$project" ]; then
  echo "$0 requires "'$project to be set to your project' >&2
  exit 1
fi

if [ ! -e "$dict" ]; then
  echo "Retrieving cached $(basename "$wordlist")"
  # english.words is taken from rpm:
  # https://rpmfind.net/linux/fedora/linux/development/rawhide/Everything/aarch64/os/Packages/w/"
  # "words-.*.noarch.rpm"
  (
    gsutil cp -Z $wordlist "$dict"
  ) >/dev/null 2>/dev/null
fi

project_file_path() {
  echo $bucket/$project/$1.txt
}

get_project_files() {
  file=$1
  dest=$2
  if [ ! -e "$dest" ]; then
    from=$(project_file_path $file)
    echo "Retrieving cached $file from $from"
    gsutil cp -Z $from $dest >/dev/null 2>/dev/null
  fi
}
get_project_files whitelist $whitelist_path
get_project_files excludes $excludelist_path

if [ ! -e "$word_splitter" ]; then
  echo "Retrieving w"
  curl -s "$w_location" |\
    perl -p -n -e "s</usr/share/dict/words><$dict>" > "$word_splitter"
  get_word_splitter_status="${PIPESTATUS[0]} ${PIPESTATUS[1]}"
  if [ "$get_word_splitter_status" != '0 0' ]; then
    echo "$0 failed to retrieve/adapt word splitter ($w_location) ($get_word_splitter_status)"
    rm -f "$word_splitter"
    exit 6
  fi
  chmod u+x "$word_splitter"
  echo "Retrieved."
  ls -la "$word_splitter"
fi

if [ -n "$debug" ]; then
  echo "Clean up from previous run"
fi
rm -f "$run_output"

echo "Checking spelling..."
(git 'ls-files' -z 2> /dev/null || hg locate -0) |\
  "$spellchecker/exclude.pl" |\
  xargs -0 "$word_splitter" |\
  "$word_splitter" |\
  perl -p -n -e 's/ \(.*//' > "$run_output"
  word_splitter_status="${PIPESTATUS[2]} ${PIPESTATUS[3]}"
  if [ "$word_splitter_status" != '0 0' ]; then
    echo "$word_splitter failed ($word_splitter_status)"
    exit 2
  fi

printDetails() {
  echo ''
  echo 'If you are ok with the output of this run, you will need to'
}

to_retrieve_whitelist() {
  echo gsutil cp -Z $(project_file_path whitelist) whitelist.txt
}
to_publish_whitelist() {
  echo gsutil cp -Z whitelist.txt $(project_file_path whitelist)
}

if [ -z "$junit" ]; then
  echo "Review results"
fi

spelling_header='<?xml version="1.0" encoding="UTF-8"?>
<testsuite>
  <testcase name="Spell checking" classname="com.soref.josh.spellchecker" time="1">'
spelling_warning() {
  echo '    <failure message="'"$1"'">
</failure>
    <system-out><![CDATA['"$2"']]></system-out>
    <system-err><![CDATA['"$3"']]></system-err>'
}
new_words() {
  echo "$1" | perl -ne 'next unless s/^\+//;print'
}
spelling_footer='  </testcase>
</testsuite>'

quit() {
  if [ -n "$junit" ]; then
    exit
  fi
  exit $1
}

if [ ! -e "$whitelist_path" ]; then
  title="No preexisting $whitelist_path file"
  instructions=$(
    echo 'cat > '"$whitelist_path"' <<EOF=EOF'
    cat "$run_output"
    echo EOF=EOF
    to_publish_whitelist
  )
  if [ -z "$junit" ]; then
    echo "$title."
    printDetails
    echo "$instructions"
  else
    (
      echo "$spelling_header"
      spelling_warning "$title" "$run_output" "$instructions"
      echo "$spelling_footer"
    ) > "$junit"
  fi
  quit 2
fi

diff_output=$(diff -U1 "$whitelist_path" "$run_output" |grep -v "$spellchecker" || true)

if [ -z "$diff_output" ]; then
  if [ -z "$junit" ]; then
    echo "No new words with misspellings found."
  else
    (
      echo "$spelling_header"
      echo "$spelling_footer"
    ) > "$junit"
  fi
  quit 0
fi

new_output=$(diff -i -U0 "$whitelist_path" "$run_output" |grep -v "$spellchecker" |\
  perl -n -w -e 'next unless /^\+/; next if /^\+{3} /; s/^.//; print;')
if [ -z "$new_output" ]; then
  title='There are now fewer misspellings than before'
  instructions=$(
    to_retrieve_whitelist
    echo "patch whitelist.txt <<EOF"
    echo "$diff_output"
    echo "EOF"
    to_publish_whitelist
  )
  if [ -z "$junit" ]; then
    echo "$title."
    echo "$whitelist_path could be updated:"
    echo ''
    echo "$instructions"
  else
    (
      echo "$spelling_header"
      spelling_warning "$title" "$(new_words "$diff_output")" "$instructions"
      echo "$spelling_footer"
    ) > "$junit"
  fi
  quit
fi
title='New misspellings found, please review'
instructions=$(
  to_retrieve_whitelist
  echo "patch whitelist.txt <<EOF"
  echo "$diff_output"
  echo "EOF"
  to_publish_whitelist
)
if [ -z "$junit" ]; then
  echo "$title:"
  echo "$new_output"
  printDetails
  echo "$instructions"
else
  (
    echo "$spelling_header"
    spelling_warning "$title" "$new_output" "$instructions"
    echo "$spelling_footer"
  ) > "$junit"
fi
quit
