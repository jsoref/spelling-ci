#!/bin/bash
# This CI acceptance test is based on:
# https://github.com/jsoref/spelling/tree/04648bdc63723e5cdf5cbeaff2225a462807abc8
# It is conceptually `f` which runs `w` (spelling-unknown-word-splitter)
# plus `fchurn` which uses `dn` mostly rolled together.
set -e

bucket=gs://REPLACE-WITH-YOUR-BUCKET-URL
project=REPLACE-WITH-YOUR-PROJECT-FOLDER
spellchecker='spelling-ci'
wordlist=$bucket/english.words.gz
w_location='https://raw.githubusercontent.com/jsoref/spelling/master/w'
temp='.ci-temp'

whitelist_path="$temp/whitelist.words"
excludelist_path="$temp/excludes"
dict="$temp/english.words"
word_splitter="$temp/spelling-unknown-word-splitter"
run_output="$temp/unknown.words"

if [ ! -e "$dict" ]; then
  mkdir -p $temp
  echo "Retrieving cached english.words from $wordlist"
  # english.words is taken from rpm:
  # https://rpmfind.net/linux/fedora/linux/development/rawhide/Everything/aarch64/os/Packages/w/"
  # "words-.*.noarch.rpm"
  local=$(basename $wordlist)
  gsutil cp $wordlist $local &&
  gunzip -c $local > $dict &&
  rm $local
fi

project_file_path() {
  echo $bucket/$project/$1
}

get_project_files() {
  file=$1
  dest=$2
  if [ ! -e "$dest" ]; then
    from=$(project_file_path $file)
    echo "Retrieving cached $file from $from"
    gsutil cp $from $dest
  fi
}
get_project_files whitelist $whitelist_path
get_project_files excludes $excludelist_path

if [ ! -e "$word_splitter" ]; then
  echo "Retrieving w"
  curl -s "$w_location" |\
    perl -p -n -e "s</usr/share/dict/words><$dict>" > "$word_splitter"
  get_word_splitter_status="${PIPESTATUS[0]} ${PIPESTATUS[1]}"
  if [ "$get_word_splitter_status" != '0 0' ]; then
    echo "$0 failed to retrieve/adapt word splitter ($w_location) ($get_word_splitter_status)"
    rm -f "$word_splitter"
    exit 6
  fi
  chmod u+x "$word_splitter"
  echo "Retrieved."
  ls -la "$word_splitter"
fi

echo "Clean up from previous run"
rm -f "$run_output"

echo "Run w"
(git 'ls-files' -z 2> /dev/null || hg locate -0) |\
  "$spellchecker/exclude" |\
  xargs -0 "$word_splitter" |\
  "$word_splitter" |\
  perl -p -n -e 's/ \(.*//' > "$run_output"
  word_splitter_status="${PIPESTATUS[2]} ${PIPESTATUS[3]}"
  if [ "$word_splitter_status" != '0 0' ]; then
    echo "$word_splitter failed ($word_splitter_status)"
    exit 2
  fi

printDetails() {
  echo ''
  echo 'If you are ok with the output of this run, you will need to'
}

to_retrieve_whitelist() {
  echo gsutil cp $(project_file_path whitelist) whitelist
}
to_publish_whitelist() {
  echo gsutil cp whitelist $(project_file_path whitelist)
}

echo "Review results"
if [ ! -e "$whitelist_path" ]; then
  echo "No preexisting $whitelist_path file."
  printDetails
  echo 'cat > '"$whitelist_path"' <<EOF=EOF'
  cat "$run_output"
  echo EOF=EOF
  to_publish_whitelist
  exit 2
fi

diff_output=$(diff -U1 "$whitelist_path" "$run_output" |grep -v "$spellchecker" || true)

if [ -z "$diff_output" ]; then
  echo "No new words with misspellings found."
  exit 0
fi

new_output=$(diff -i -U0 "$whitelist_path" "$run_output" |grep -v "$spellchecker" |\
  perl -n -w -e 'next unless /^\+/; next if /^\+{3} /; s/^.//; print;')
if [ -z "$new_output" ]; then
  echo "There are now fewer misspellings than before."
  echo "$whitelist_path could be updated:"
  echo ''
  to_retrieve_whitelist
  echo "patch whitelist <<EOF"
  echo "$diff_output"
  echo "EOF"
  to_publish_whitelist
  sleep 5
  exit 1
fi
echo "New misspellings found, please review:"
echo "$new_output"
printDetails
to_retrieve_whitelist
echo "patch whitelist <<EOF"
echo "$diff_output"
echo "EOF"
to_publish_whitelist
sleep 5
exit 1
